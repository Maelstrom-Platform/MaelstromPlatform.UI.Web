@inject HttpClient Http
@inject NavigationManager Navigation

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Wrap="FlexWrap.NoWrap">
    @if (IsLoading)
    {
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        <RadzenText TextStyle="TextStyle.DisplayH4">Browse People</RadzenText>
        <RadzenDataGrid AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="true"
                        FilterMode="FilterMode.Advanced"
                        AllowSorting="true"
                        PageSize="@PageSize"
                        AllowPaging="true"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        Data="@Data"
                        SelectionMode="DataGridSelectionMode.Single"
                        TItem="ProductModel">
            <Columns>
                <RadzenDataGridColumn Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="false">
                    <Template Context="product">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => ViewObject(product))" @onclick:stopPropagation="true"></RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
                @foreach (var column in Columns)
                {
                    <RadzenDataGridColumn Property="@column.Property" Title="@column.Title" Frozen="@column.Frozen" Width="@column.Width.ToString()" TextAlign="@column.TextAlign" />
                }
            </Columns>
        </RadzenDataGrid>
    }
</RadzenStack>

@code {
    private bool IsLoading { get; set; } = true;
    private List<ProductModel> Data { get; set; } = new();

    private ushort PageSize { get; set; } = 10;

    private List<MaelstromDataGridColumn> Columns =
    [
        new MaelstromDataGridColumn() { Property = "Identifier", Title = "Identifier", Filterable = true, Frozen = false, TextAlign = TextAlign.Left, Width = 100 },
    new MaelstromDataGridColumn() { Property = "Title", Title = "Title", Filterable = true, Frozen = false, TextAlign = TextAlign.Left, Width = 200 }
    ];

    private async Task<List<ProductModel>> GetItemDetails()
    {
        var result = await Http.GetFromJsonAsync<List<ProductModel>>($"/api/products") ?? new List<ProductModel>();
        return result;
    }

    protected override async Task OnParametersSetAsync()
    {
        Data = await GetItemDetails();
        await base.OnParametersSetAsync();
        IsLoading = false;
    }

    private void ViewObject(ProductModel product)
    {
        Navigation.NavigateTo($"product/{product.SysId}");
    }
}
