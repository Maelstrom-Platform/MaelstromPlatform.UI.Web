@using System.Text
@using Microsoft.AspNetCore.JsonPatch
@using Newtonsoft.Json
@inject HttpClient Http

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Wrap="FlexWrap.NoWrap">
    @if (IsLoading)
    {
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        <EditForm Model="IssueData" OnValidSubmit="SaveAsync" FormName="IssueStatus">
        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.NoWrap">
        @* Status *@
        <RadzenFieldset AllowCollapse="true" ExpandTitle="Status" CollapseTitle="Status" ExpandAriaLabel="Status" CollapseAriaLabel="Status">
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.25rem">
                    <RadzenIcon Icon="face" /><b>Status</b>
                </RadzenStack>
            </HeaderTemplate>
            <ChildContent>
                <RadzenRow>
                    <RadzenColumn Size="6">
                        <RadzenFormField AllowFloatingLabel="false" Text="State" Variant="Variant.Outlined" Style="width: 100%">
                            <RadzenDropDown @bind-Value="@IssueData.IssueStateSysId" />
                        </RadzenFormField>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                        <RadzenFormField AllowFloatingLabel="false" Text="Status" Variant="Variant.Outlined" Style="width: 100%">
                            <RadzenDropDown @bind-Value="@IssueData.IssueStatusSysId" />
                        </RadzenFormField>
                    </RadzenColumn>
                </RadzenRow>
            </ChildContent>
        </RadzenFieldset>
        <RadzenRow>
            <RadzenColumn Size="2">
                <RadzenButton Style="width: 100%" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary">Save</RadzenButton>
            </RadzenColumn>
        </RadzenRow>
        </RadzenStack>
        </EditForm>
    }
</RadzenStack>

@code {
    [Parameter] public Guid Id { get; set; }

    private bool IsLoading { get; set; } = true;

    private IssueModel IssueData = new();
    private string Identifier { get; set; }

    private async Task<IssueModel> GetItemDetails()
    {
        var result = await Http.GetFromJsonAsync<IssueModel>($"/api/issues/{Id}") ?? new IssueModel();
        return result;
    }

    protected override async Task OnParametersSetAsync()
    {
        IssueData = await GetItemDetails();
        Identifier = IssueData.Identifier;
        await base.OnParametersSetAsync();
        IsLoading = false;
    }

    private async Task<HttpResponseMessage> SaveAsync()
    {
        var patchDoc = new JsonPatchDocument<IssueModel>();
        patchDoc.Replace(slu => slu.Slug, IssueData.Slug);
        patchDoc.Replace(sb => sb.SummaryBrief, IssueData.SummaryBrief);
        patchDoc.Replace(sl => sl.SummaryLong, IssueData.SummaryLong);
        var serializedDoc = JsonConvert.SerializeObject(patchDoc);
        var requestContent = new StringContent(serializedDoc, Encoding.UTF8, "application/json-patch+json");
        return await Http.PatchAsync($"/api/issues/{IssueData.SysId}", requestContent);
    }
}
